// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth-client-server.proto

/*
Package auth_client_server is a generated protocol buffer package.

It is generated from these files:
	auth-client-server.proto

It has these top-level messages:
	ServerAuthRequest
	ServerAuthResponse
	Error
*/
package auth_client_server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// request from client to server
type ServerAuthRequest struct {
	// client may send any JSON to server
	// server transparently send this JSON to auth plugin
	Json string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
}

func (m *ServerAuthRequest) Reset()                    { *m = ServerAuthRequest{} }
func (m *ServerAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerAuthRequest) ProtoMessage()               {}
func (*ServerAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerAuthRequest) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type ServerAuthResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// server encode auth plugin response to JWT and sign it with $SECRET
	Jwt string `protobuf:"bytes,2,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *ServerAuthResponse) Reset()                    { *m = ServerAuthResponse{} }
func (m *ServerAuthResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerAuthResponse) ProtoMessage()               {}
func (*ServerAuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerAuthResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ServerAuthResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type Error struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerAuthRequest)(nil), "ServerAuthRequest")
	proto.RegisterType((*ServerAuthResponse)(nil), "ServerAuthResponse")
	proto.RegisterType((*Error)(nil), "Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerAuth service

type ServerAuthClient interface {
	Auth(ctx context.Context, in *ServerAuthRequest, opts ...grpc.CallOption) (*ServerAuthResponse, error)
}

type serverAuthClient struct {
	cc *grpc.ClientConn
}

func NewServerAuthClient(cc *grpc.ClientConn) ServerAuthClient {
	return &serverAuthClient{cc}
}

func (c *serverAuthClient) Auth(ctx context.Context, in *ServerAuthRequest, opts ...grpc.CallOption) (*ServerAuthResponse, error) {
	out := new(ServerAuthResponse)
	err := grpc.Invoke(ctx, "/ServerAuth/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerAuth service

type ServerAuthServer interface {
	Auth(context.Context, *ServerAuthRequest) (*ServerAuthResponse, error)
}

func RegisterServerAuthServer(s *grpc.Server, srv ServerAuthServer) {
	s.RegisterService(&_ServerAuth_serviceDesc, srv)
}

func _ServerAuth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServerAuth/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAuthServer).Auth(ctx, req.(*ServerAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServerAuth",
	HandlerType: (*ServerAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _ServerAuth_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth-client-server.proto",
}

func init() { proto.RegisterFile("auth-client-server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x2c, 0x2d, 0xc9,
	0xd0, 0x4d, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe7, 0x12, 0x0c, 0x06, 0xf3, 0x1d, 0x4b, 0x4b, 0x32, 0x82,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xb2, 0x8a, 0xf3, 0xf3, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x17, 0x2e, 0x21, 0x64, 0x85, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x42, 0x32, 0x5c, 0xac, 0xa9, 0x45, 0x45, 0xf9, 0x45, 0x60, 0xa5, 0xdc, 0x46,
	0x6c, 0x7a, 0xae, 0x20, 0x5e, 0x10, 0x44, 0x50, 0x48, 0x80, 0x8b, 0x39, 0xab, 0xbc, 0x44, 0x82,
	0x09, 0x6c, 0x0c, 0x88, 0xa9, 0x64, 0xca, 0xc5, 0x0a, 0x56, 0x01, 0xb2, 0x22, 0x39, 0x3f, 0x25,
	0x15, 0xac, 0x8f, 0x35, 0x08, 0xcc, 0x16, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x85, 0x6a, 0x81, 0x71, 0x8d, 0xec, 0xb9, 0xb8, 0x10, 0x96, 0x0b, 0x19, 0x72, 0xb1, 0x80,
	0x69, 0x21, 0x3d, 0x0c, 0xa7, 0x4b, 0x09, 0xeb, 0x61, 0xba, 0x52, 0x89, 0x21, 0x89, 0x0d, 0xec,
	0x5b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xe0, 0x54, 0xd9, 0x09, 0x01, 0x00, 0x00,
}
